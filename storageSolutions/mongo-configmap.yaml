---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init
data:
  init.sh: |
    #!/bin/bash
    # Wait for the readiness health check to pass so that mongo names resolve.
    until ping -c 1 ${HOSTNAME}.mongo; do
      echo "waiting for DNS (${HOSTNAME}.mongo)..."
      sleep 2
    done

    # Wait for the connection to the local mongo instance.
    until /usr/bin/mongo --eval 'printjson(db.serverStatus())'; do
      echo "connecting to local mongo..."
      sleep 2
    done
    echo "connected to local."

    # Define the primary host.
    HOST=mongo-0.mongo:27017

    # Wait for the connection to the primary mongo instance.
    until /usr/bin/mongo --host=${HOST} \
      --eval 'printjson(db.serverStatus())'; do
      echo "connecting to remote mongo..."
      sleep 2
    done
    echo "connected to remote."

    # Add self to the replica set if not the primary.
    if [[ "${HOSTNAME}" != 'mongo-0' ]]; then
      until /usr/bin/mongo --host=${HOST} --eval="printjson(rs.status())" \
      | grep -v "no replset config has been received"; do
        echo "waiting for replication set initialization"
        sleep 2
      done
      echo "adding self to mongo-0"
      /usr/bin/mongo --host=${HOST} \
      --eval="printjson(rs.add('${HOSTNAME}.mongo'))"
    fi

    # Initialize the replica set if the primary.
    if [[ "${HOSTNAME}" == 'mongo-0' ]]; then
      echo "initializing replica set"
      /usr/bin/mongo --eval="printjson(rs.initiate(\
      {'_id': 'rs0', 'members': [{'_id': 0, \
      'host': 'mongo-0.mongo:27017'}]}))"
    fi
    echo "initialized"

    # Keep the script running.
    while true; do
      sleep 3600
    done
